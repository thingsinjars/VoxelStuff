[
  {
    "name": "Transform.java",
    "path": "src/com/ch/Transform.java",
    "content": {
      "structured": {
        "description": "A `Transform` class that represents a transformable object in a 3D space. It has various methods for rotating, looking at a point, and translating, as well as getting and setting position, rotation, and scale. The class also has a `getTransformation()` method that returns the transformation matrix of the object, and an `update()` method that updates the object's position, rotation, and scale based on user input.",
        "diagram": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    Camera []\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Transform [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    Quaternion []\n    Vector3f []\n    Matrix4f []\n    Transform -> Quaternion [dir=\"both\", penwidth=4]\n    Vector3f -> Transform [dir=\"both\", penwidth=11]\n    Transform -> Matrix4f [style=\"dashed\"]\n    Transform -> Quaternion [style=\"dashed\"]\n    Transform -> Vector3f [style=\"dashed\"]\n    Camera -> Transform [penwidth=1]\n    Transform -> Matrix4f [penwidth=2]\n}\n",
        "d2diagram": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 769 850\"><svg id=\"d2-svg\" class=\"d2-18545870\" width=\"769\" height=\"850\" viewBox=\"11 11 769 850\"><rect x=\"11.000000\" y=\"11.000000\" width=\"769.000000\" height=\"850.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-18545870 .text {\n\tfont-family: \"d2-18545870-font-regular\";\n}\n@font-face {\n\tfont-family: d2-18545870-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-18545870 .text-italic {\n\tfont-family: \"d2-18545870-font-italic\";\n}\n@font-face {\n\tfont-family: d2-18545870-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-18545870 .text-mono {\n\tfont-family: \"d2-18545870-font-mono\";\n}\n@font-face {\n\tfont-family: d2-18545870-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-18545870 .text-mono-bold {\n\tfont-family: \"d2-18545870-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-18545870-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-18545870 .fill-N1{fill:#ECEDED;}\n\t\t.d2-18545870 .fill-N2{fill:#676C7E;}\n\t\t.d2-18545870 .fill-N3{fill:#9499AB;}\n\t\t.d2-18545870 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-18545870 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-18545870 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-18545870 .fill-N7{fill:#151719;}\n\t\t.d2-18545870 .fill-B1{fill:#717D86;}\n\t\t.d2-18545870 .fill-B2{fill:#717D86;}\n\t\t.d2-18545870 .fill-B3{fill:#ffff00;}\n\t\t.d2-18545870 .fill-B4{fill:#151719;}\n\t\t.d2-18545870 .fill-B5{fill:#151719;}\n\t\t.d2-18545870 .fill-B6{fill:#151719;}\n\t\t.d2-18545870 .fill-AA2{fill:#676C7E;}\n\t\t.d2-18545870 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-18545870 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-18545870 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-18545870 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-18545870 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-18545870 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-18545870 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-18545870 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-18545870 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-18545870 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-18545870 .stroke-N7{stroke:#151719;}\n\t\t.d2-18545870 .stroke-B1{stroke:#717D86;}\n\t\t.d2-18545870 .stroke-B2{stroke:#717D86;}\n\t\t.d2-18545870 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-18545870 .stroke-B4{stroke:#151719;}\n\t\t.d2-18545870 .stroke-B5{stroke:#151719;}\n\t\t.d2-18545870 .stroke-B6{stroke:#151719;}\n\t\t.d2-18545870 .stroke-AA2{stroke:#676C7E;}\n\t\t.d2-18545870 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-18545870 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-18545870 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-18545870 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-18545870 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-18545870 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-18545870 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-18545870 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-18545870 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-18545870 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-18545870 .background-color-N7{background-color:#151719;}\n\t\t.d2-18545870 .background-color-B1{background-color:#717D86;}\n\t\t.d2-18545870 .background-color-B2{background-color:#717D86;}\n\t\t.d2-18545870 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-18545870 .background-color-B4{background-color:#151719;}\n\t\t.d2-18545870 .background-color-B5{background-color:#151719;}\n\t\t.d2-18545870 .background-color-B6{background-color:#151719;}\n\t\t.d2-18545870 .background-color-AA2{background-color:#676C7E;}\n\t\t.d2-18545870 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-18545870 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-18545870 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-18545870 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-18545870 .color-N1{color:#ECEDED;}\n\t\t.d2-18545870 .color-N2{color:#676C7E;}\n\t\t.d2-18545870 .color-N3{color:#9499AB;}\n\t\t.d2-18545870 .color-N4{color:#CFD2DD;}\n\t\t.d2-18545870 .color-N5{color:#DEE1EB;}\n\t\t.d2-18545870 .color-N6{color:#EEF1F8;}\n\t\t.d2-18545870 .color-N7{color:#151719;}\n\t\t.d2-18545870 .color-B1{color:#717D86;}\n\t\t.d2-18545870 .color-B2{color:#717D86;}\n\t\t.d2-18545870 .color-B3{color:#ffff00;}\n\t\t.d2-18545870 .color-B4{color:#151719;}\n\t\t.d2-18545870 .color-B5{color:#151719;}\n\t\t.d2-18545870 .color-B6{color:#151719;}\n\t\t.d2-18545870 .color-AA2{color:#676C7E;}\n\t\t.d2-18545870 .color-AA4{color:#CFD2DD;}\n\t\t.d2-18545870 .color-AA5{color:#DEE1EB;}\n\t\t.d2-18545870 .color-AB4{color:#CFD2DD;}\n\t\t.d2-18545870 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"12.000000\" width=\"767.000000\" height=\"848.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"395.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"62.000000\" width=\"667.000000\" height=\"748.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"395.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"com.ch.Transform\"><g class=\"shape\" ><rect x=\"384.000000\" y=\"248.000000\" width=\"200.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"484.000000\" y=\"286.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Transform</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"549.000000\" width=\"527.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"375.500000\" y=\"574.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.Camera\"><g class=\"shape\" ><rect x=\"433.000000\" y=\"112.000000\" width=\"102.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"484.000000\" y=\"150.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Camera</text></g><g id=\"com.ch.math.Matrix4f\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"599.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"223.500000\" y=\"637.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Matrix4f</text></g><g id=\"com.ch.math.Quaternion\"><g class=\"shape\" ><rect x=\"305.000000\" y=\"599.000000\" width=\"141.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"375.500000\" y=\"637.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Quaternion</text></g><g id=\"com.ch.math.Vector3f\"><g class=\"shape\" ><rect x=\"466.000000\" y=\"599.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"527.500000\" y=\"637.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Vector3f</text></g><g id=\"com.ch.(Transform -&gt; math.Matrix4f)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 413.213989 315.000000 L 413.213989 344.000000 S 413.213989 354.000000 403.213989 354.000000 L 213.000000 354.000000 S 203.000000 354.000000 203.000000 364.000000 L 203.000000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-18545870)\" /><text x=\"237.000000\" y=\"589.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Transform -&gt; math.Quaternion)[0]\"><path d=\"M 470.356995 315.000000 L 470.356995 444.000000 S 470.356995 454.000000 460.356995 454.000000 L 362.000000 454.000000 S 352.000000 454.000000 352.000000 464.000000 L 352.000000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-18545870)\" /><text x=\"386.000000\" y=\"589.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Transform -&gt; math.Vector3f)[0]\"><path d=\"M 527.500000 315.000000 L 527.500000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-18545870)\" /><text x=\"562.000000\" y=\"589.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera -&gt; Transform)[0]\"><path d=\"M 484.641998 179.000000 L 484.641998 245.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-18545870)\" /></g><g id=\"com.ch.(Transform &lt;-&gt; math.Quaternion)[0]\"><marker id=\"mk-3695359059\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"3.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"10.000000,0.000000 0.000000,6.000000 10.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 498.928009 317.000000 L 498.928009 494.000000 S 498.928009 504.000000 488.928009 504.000000 L 409.000000 504.000000 S 399.000000 504.000000 399.000000 514.000000 L 399.000000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-start=\"url(#mk-3695359059)\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-18545870)\" /></g><g id=\"com.ch.(Transform -&gt; math.Matrix4f)[1]\"><path d=\"M 441.785004 315.000000 L 441.785004 394.000000 S 441.785004 404.000000 431.785004 404.000000 L 254.000000 404.000000 S 244.000000 404.000000 244.000000 414.000000 L 244.000000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-18545870)\" /></g><g id=\"com.ch.(math.Vector3f &lt;-&gt; Transform)[0]\"><path d=\"M 527.500000 668.000000 L 527.500000 750.000000 S 527.500000 760.000000 537.500000 760.000000 L 669.000000 760.000000 S 679.000000 760.000000 679.000000 750.000000 L 679.000000 364.000000 S 679.000000 354.000000 669.000000 354.000000 L 566.070984 354.000000 S 556.070984 354.000000 556.070984 344.000000 L 556.070984 317.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-start=\"url(#mk-3695359059)\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-18545870)\" /></g><mask id=\"d2-18545870\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"769\" height=\"850\">\n<rect x=\"11\" y=\"11\" width=\"769\" height=\"850\" fill=\"white\"></rect>\n<rect x=\"371.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"384.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"440.500000\" y=\"270.500000\" width=\"87\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"354.000000\" y=\"554.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"455.500000\" y=\"134.500000\" width=\"57\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"621.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"327.500000\" y=\"621.500000\" width=\"96\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"488.500000\" y=\"621.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
        "items": [
          {
            "id": "a7344a21-36b9-3ba9-2b43-e7567a369253",
            "ancestors": [],
            "type": "function",
            "description": "from the given Java file is a class that represents a transformation in a 3D space. It has several properties and methods for rotating and scaling a transform, as well as updating its position and rotation based on user input. The class also provides methods for getting and setting the transform's parent, position, rotation, and scale.",
            "name": "Transform",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 131,
            "docLength": null
          },
          {
            "id": "3f6aea98-1360-c789-ec40-d1cf1add26d8",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "updates the values of its member variables `pos`, `rot`, and `scale`. If any of these values have changed since the last update, they are set to the new values. Otherwise, new instances of these classes are created with the current values.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    public static void main(String[] args) {\n        Transform myTransform = new Transform();\n        Vector3f pos = new Vector3f(1, 2, 3);\n        Quaternion rot = new Quaternion(0, 1, 0, 0);\n        Vector3f scale = new Vector3f(4, 5, 6);\n\n        myTransform.setPos(pos);\n        myTransform.setRot(rot);\n        myTransform.setScale(scale);\n\n        myTransform.update();\n\n        System.out.println(\"Transformed position: \" + myTransform.getPos());\n        System.out.println(\"Transformed rotation: \" + myTransform.getRot());\n        System.out.println(\"Transformed scale: \" + myTransform.getScale());\n    }\n}\n",
              "description": ""
            },
            "name": "update",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "6ffdc050-9470-1c8c-3448-fdf39b244d2e",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "multiplies a quaternion representing a rotation axis by an angle and normalizes the result, producing another quaternion that represents the rotated orientation.",
            "params": [
              {
                "name": "axis",
                "type_name": "Vector3f",
                "description": "3D rotation axis around which the rotation will occur.\n\n* `axis` is a `Vector3f` object representing a 3D vector with x, y, and z components.\n* The `x`, `y`, and `z` components of `axis` are used to define the rotation axis.\n* The `angle` parameter represents the angle of rotation in radians.",
                "complex_type": true
              },
              {
                "name": "angle",
                "type_name": "float",
                "description": "3D rotation angle of the object around the specified axis.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform myTransform = new Transform();\nVector3f axis = new Vector3f(0, 1, 0); // the vector (0,1,0) points directly upward\nfloat angle = 45.0; // in degrees\nmyTransform.rotate(axis, angle);\n",
              "description": ""
            },
            "name": "rotate",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f1854a55-2b83-d09f-f942-8198326c4161",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "computes the rotation needed to look at a point and an up vector in 3D space.",
            "params": [
              {
                "name": "point",
                "type_name": "Vector3f",
                "description": "3D position that the lookAt rotation should be applied to.\n\n* `Vector3f point`: Represents a 3D point in space with x, y, and z components.\n* `up`: Represents a vector pointing upwards in the 3D space, with a direction that is perpendicular to the plane of the point.",
                "complex_type": true
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D direction along which the object will look at the point passed as argument.\n\n* The `Vector3f` class represents a three-dimensional vector in mathematics.\n* The `getLookAtRotation` method returns a rotation matrix that aligns the `rot` object with the specified `point` and `up` vectors.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\tTransform transform = new Transform(); // Create a new instance of the class Transform \n\tVector3f point = new Vector3f(0, 10, 0); // Set a vector with values (0, 10, 0) as the target point to look at.\n\tVector3f up = new Vector3f(0, 1, 0); // Set a vector with values (0, 1, 0) as the up direction of the transform object.\n\n\ttransform.lookAt(point, up); // Call the method lookAt on the transform object, passing in the point and up vectors.\n}\n",
              "description": "\nThis code will rotate the Transform object to face the target point (0, 10, 0) with its forward vector along the negative z-axis. The up direction of the Transform object is set to the vector (0, 1, 0), which means that the transform will be oriented with its y-axis pointing upwards."
            },
            "name": "lookAt",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "870b0502-2b11-6884-5142-23732097162e",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "computes a rotation quaternion that looks at a specified point from a given up vector, using the rotation matrix representation.",
            "params": [
              {
                "name": "point",
                "type_name": "Vector3f",
                "description": "3D position in space that the look-at rotation is to be applied around.\n\n* `point` is a `Vector3f` object representing a 3D point in space.\n* `up` is another `Vector3f` object representing a reference direction in space.",
                "complex_type": true
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D vector that defines the orientation of the look-at axis, which is used to compute the rotation matrix that transforms the point from the world space to the view space.\n\n* `up` is a `Vector3f` object that represents an upward direction vector in 3D space. It has x, y, and z components, which are typically non-negative values representing the magnitude of the vector.\n* The `up` vector is used to compute the rotation matrix that transforms the original position of a 3D object to its look-at position.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion representing the rotation needed to look at a point in 3D space from a specific position and direction.\n\n* The output is a `Quaternion` object, which represents a 3D rotation transformation.\n* The quaternion is generated using the rotational component of the input vector `point - pos`, which is normalized to ensure that the rotation is properly oriented.\n* The up vector in the input is used to determine the orientation of the rotation.\n\nOverall, the function returns a quaternion that represents the rotation needed to look at a point in 3D space from a specific viewpoint, based on two input vectors representing the position and orientation of the viewer.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform(); // create a new Transform object\nVector3f point = new Vector3f(5, 0, 0); // the point we want to look at\nVector3f up = new Vector3f(0, 1, 0); // the up vector (usually (0, 1, 0) for Y-up coordinates)\nQuaternion rotation = transform.getLookAtRotation(point, up);\ntransform.setRot(rotation); // set the rotation of the Transform object to the returned Quaternion value\n",
              "description": ""
            },
            "name": "getLookAtRotation",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1a15381d-7c31-cfad-1543-759d2db52cad",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "checks if any of its variables have changed compared to their previous values. It returns `true` if any variable has changed, and `false` otherwise.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the object has changed.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform myTransform = new Transform();\nmyTransform.setPos(new Vector3f(1, 2, 3));\nmyTransform.setRot(new Quaternion(0, 1, 0, 0));\nmyTransform.setScale(new Vector3f(4, 5, 6));\nif (myTransform.hasChanged()) {\n    System.out.println(\"The transform has changed!\");\n}\n",
              "description": "\nIn this example, the transform is initialized with a position, rotation, and scale. The method hasChanged() is then called on myTransform to check if any of its components have changed since the last time it was updated. Since the transform has been modified by setting its position, rotation, and scale, hasChanged() returns true, indicating that the transform has changed."
            },
            "name": "hasChanged",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "8cc6b032-0465-68af-7f4e-0af544b8c6a1",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "computes and returns a transformation matrix based on the position, rotation, and scale of an object, using the parent matrix and multiplication operations.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a transformed matrix that combines translation, rotation, and scaling effects.\n\n* The multiplication of the parent matrix `getParentMatrix()` with the translation matrix `translationMatrix`, rotation matrix `rotationMatrix`, and scale matrix `scaleMatrix` results in the final transformation matrix.\n* The translation matrix `translationMatrix` represents a displacement in 3D space, with its elements indicating the x, y, and z coordinates of the displacement.\n* The rotation matrix `rotationMatrix` represents a rotation around a central axis, with its elements indicating the amount of rotation in each axis (x, y, and z).\n* The scale matrix `scaleMatrix` represents a scaling operation, with its elements indicating the amount of scaling along each axis (x, y, and z).\n\nTherefore, the output of the `getTransformation` function is a transformation matrix that combines these three operations (translation, rotation, and scaling) to produce the final transformation.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.setPos(new Vector3f(1, 2, 3));\ntransform.setRot(new Quaternion(0, 1, 0, 0));\ntransform.setScale(new Vector3f(4, 5, 6));\nMatrix4f transformation = transform.getTransformation();\n",
              "description": "\nIn this example, the Transform object is created and its position, rotation, and scale are set to specific values using the set methods. The getTransformation method is then called on the Transform object to retrieve a transformation matrix that represents the combined transformation of all three attributes (position, rotation, and scale). This transformation matrix can then be used for further calculations or operations involving the transform."
            },
            "name": "getTransformation",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "4d739eea-39e2-05ba-3447-b47752cebb8c",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "retrieves and returns the transformation matrix of its parent node, taking into account any changes to the parent's transformation.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing the transformation matrix of the parent node.\n\n* `parentMatrix`: This is a Matrix4f object representing the parent transformation matrix of the current transform.\n* `hasChanged()`: This method checks if the parent transformation matrix has been modified since the last call to the `getParentMatrix` function. If the matrix has changed, it returns the updated matrix. Otherwise, it returns the same matrix as before.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Transform child = new Transform(); //create a new child transform\nTransform parent = new Transform(); //create a new parent transform\nchild.setParent(parent); //set the child's parent to the parent transform\nparent.update(); //update the parent transform\nMatrix4f parentTransformation = child.getParentMatrix(); //obtain the transformation of the parent transform\n",
              "description": ""
            },
            "name": "getParentMatrix",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "5a78f96c-44ba-e78a-c446-1c387183e43a",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "sets the `parent` field to a given `Transform` object, allowing for the inheritance of properties and methods from the parent object.",
            "params": [
              {
                "name": "parent",
                "type_name": "Transform",
                "description": "Transform object that this instance will be the child of, and it is assigned to the `parent` field of the current class.\n\n* Type: `Transform` - represents a transformer object in the parent class hierarchy.\n* Value: The deserialized value of the `parent` field, which is a reference to another transformer object.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform child = new Transform();\nTransform parent = new Transform();\nchild.setParent(parent);\n",
              "description": ""
            },
            "name": "setParent",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e2d1dfb5-bd6b-6fbf-9547-8244e24338ea",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "transforms a `Vector3f` object using the matrix provided by `getParentMatrix`. The transformed position is then returned.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a transformed position vector.\n\n* The Vector3f object represents the transformed position of an object in 3D space after applying a matrix transformation.\n* The transformation is applied to the input position vector using the `transform()` method of the parent matrix.\n* The resulting transformed position vector contains the updated coordinates after application of the matrix transformation.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Transform mytransform = new Transform();\nmytransform.setPos(new Vector3f(1, 2, 3));\nSystem.out.println(mytransform.getTransformedPos());\n",
              "description": "\nIn this example the position of transform is set to a vector of (1, 2, 3), and then its transformed position using getTransformedPos() method is printed on the console."
            },
            "name": "getTransformedPos",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9d0392a8-b5ba-b6b2-3648-0342dbc1bb75",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "takes a `Quaternion` object `parentRotation` and multiplies it by another `Quaternion` object `rot`, returning the transformed rotation.",
            "params": [],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion representation of the transformed rotation matrix multiplied by the input rotation matrix.\n\nThe `Quaternion` object represents a rotation transformation that is the result of multiplying the parent rotation (`parentRotation`) by the rotational component (`rot`). This multiplication results in a new rotation representation that combines the two input rotations.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\t// Initialize a Transform object\n\tTransform transform = new Transform();\n\n\t// Set the position, rotation, and scale of the transform\n\ttransform.setPos(new Vector3f(10, 20, 30));\n\ttransform.setRot(new Quaternion(1, 0, 0, 0).mul(rotation));\n\ttransform.setScale(new Vector3f(2, 2, 2));\n\n\t// Get the transformed rotation of the transform\n\tQuaternion transformedRot = transform.getTransformedRot();\n\n\t// Print the transformed rotation\n\tSystem.out.println(\"Transformed rotation: \" + transformedRot);\n}\n",
              "description": ""
            },
            "name": "getTransformedRot",
            "location": {
              "start": 98,
              "insert": 98,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "87aba3c7-dcb7-0290-534d-73f973f4a6f2",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "returns the position of an object in 3D space as a `Vector3f` object.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a reference to a `Vector3f` object representing the position of an entity.\n\n* The `Vector3f` object represents a 3D point in homogeneous coordinates, consisting of x, y, and z components.\n* The `pos` field is a member variable of the class that stores the position of an entity in a 3D space.\n* The `getPos` function simply returns the value of the `pos` field, allowing for easy access to the position of the entity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Transform t = new Transform();\nVector3f position = t.getPos();\n",
              "description": ""
            },
            "name": "getPos",
            "location": {
              "start": 107,
              "insert": 107,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6ffbc7cb-c824-3cb5-7b4f-cc71fd02f7c5",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "sets the position of an object to a new value represented as a Vector3f.",
            "params": [
              {
                "name": "pos",
                "type_name": "Vector3f",
                "description": "3D position of an object to which the method is being applied, and it is assigned the value of the `pos` argument passed to the function.\n\n* `this.pos`: It is a Vector3f instance field that represents the position of an object in 3D space.\n* `pos`: It is an instance field that holds the vector representation of the position of an object in 3D space.\n* Other properties/attributes, such as x, y, and z components of the position vector, are also present in the `pos` instance field.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f myPos = new Vector3f(5, 10, 20); // Input for position vector\nTransform myTransform = new Transform(); // create a transform object\nmyTransform.setPos(myPos); // assign the input vector to the position of the transform object\n",
              "description": ""
            },
            "name": "setPos",
            "location": {
              "start": 111,
              "insert": 111,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4780695e-3b85-b795-7841-9c38a709abfd",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "adds a vector to the position of an object, updating its new position based on the sum of the current position and the input vector.",
            "params": [
              {
                "name": "addVec",
                "type_name": "Vector3f",
                "description": "3D vector to be added to the current position of the object.\n\n* `Vector3f`: This class represents a 3D vector with three components (x, y, and z).\n* `setPos()`: A method that sets the position of an object. It takes a `Vector3f` argument representing the new position.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f addVec = new Vector3f(1, 2, 3);\ntransform.addToPos(addVec);\n",
              "description": "\nIn this case, the position of the transform will be incremented by the vector (1, 2, 3)."
            },
            "name": "addToPos",
            "location": {
              "start": 115,
              "insert": 115,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 1,
            "docLength": null
          },
          {
            "id": "dcfd6b12-69a0-18a7-7b46-cd9af03a9cf6",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "returns a `Quaternion` object representing the rotation component of an entity.",
            "params": [],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion object representing the rotation of the game object.\n\n1. The `rot` variable is a Quaternion object representing the rotation of the entity.\n2. It has four components - x, y, z, and w - which represent the real and imaginary parts of the quaternion.\n3. The Quaternion object can be used to perform rotations in 3D space by multiplying it with other vectors or matrices.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();  // Create a new instance of the class Transform.\nQuaternion rot = transform.getRot();   // Get the rotation quaternion of the transform object.\nSystem.out.println(rot);               // Print the quaternion to the console.\n",
              "description": ""
            },
            "name": "getRot",
            "location": {
              "start": 117,
              "insert": 117,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4f1121ba-9293-daaf-0a43-c0ce3de2236c",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "sets the object's rotational orientation to the specified Quaternion value.",
            "params": [
              {
                "name": "rotation",
                "type_name": "Quaternion",
                "description": "4D quaternion value that modifies the rotational orientation of the object being modeled, as represented by the `this.rot` field.\n\n* Quaternion: This indicates that `rotation` is a mathematical object representing a quaternion, which is a number of the form `a + bi + cj + dk`, where `a`, `b`, `c`, and `d` are real numbers and `i`, `j`, and `k` are imaginary units that satisfy certain rules.\n* Public: This indicates that the function is intended to be accessed from outside the class, which means it can be called by other parts of the program.\n* Void: This indicates that the function does not return any value after its execution. Instead, it modifies the internal state of the object on which it is called.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform myTransform = new Transform();\nQuaternion myRotation = new Quaternion(1, 0, 0, 0);\nmyTransform.setRot(myRotation);\nSystem.out.println(\"myTransform's rotation is now: \" + myTransform.getRot());\n",
              "description": ""
            },
            "name": "setRot",
            "location": {
              "start": 121,
              "insert": 121,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d074db5b-2881-f4bf-9849-b078a9512ece",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "returns the current scale value of the object.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector of type `Vector3f`, containing the object's scale.\n\nThe Vector3f object `scale` represents a 3D vector that contains the scale values for the specified axis. The values range from -1 to 1 and can be used to modify or transform objects in 3D space.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nVector3f scale = transform.getScale();\n",
              "description": ""
            },
            "name": "getScale",
            "location": {
              "start": 125,
              "insert": 125,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "89ed1df4-d4d2-3f92-1744-43062ff85768",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "sets the scaling factor of an object, by assigning a new `Vector3f` instance to the `scale` field of the class.",
            "params": [
              {
                "name": "scale",
                "type_name": "Vector3f",
                "description": "3D scaling factor for the object, which is assigned to the `scale` field of the class.\n\n* The `Vector3f` class represents a 3D vector with real-valued components.\n* It has three fields: x, y, and z, which represent the coordinates of the vector.\n* These fields can take on any real value within their respective ranges, allowing for precise control over the vector's orientation in 3D space.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f scale = new Vector3f(1, 1, 1);\ntransform.setScale(scale);\n",
              "description": ""
            },
            "name": "setScale",
            "location": {
              "start": 129,
              "insert": 129,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "cf7a1554-c5c4-088c-7046-19c5f0b28117",
            "ancestors": [
              "a7344a21-36b9-3ba9-2b43-e7567a369253"
            ],
            "type": "function",
            "description": "returns an empty string for the class `Object`.",
            "params": [],
            "returns": {
              "type_name": "empty",
              "description": "an empty string.\n\n1. The output is an empty string (\"\"). This indicates that the object has no inherent identity or value beyond its class and state.\n2. The lack of any content in the output suggests that the object does not have any information or attributes that can be expressed through a string representation.\n3. The use of an empty string as the return type implies that the `toString` function is intended to be used for informational purposes only, and should not be relied upon for actual data retrieval or manipulation.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class MyApp {\n  public static void main(String[] args) {\n    Transform transform = new Transform();\n    System.out.println(\"transform = \" + transform);\n  }\n}\n",
              "description": "\nIn this example, the `toString` method is used to print out a representation of the `Transform` object. The output would be something like: \"transform = com.ch.math.Transform@7fa9f02e\" which is not very useful for debugging purposes. However, it does demonstrate how the `toString` method can be used to get a string representation of an object, which can then be printed out or stored in a variable."
            },
            "name": "toString",
            "location": {
              "start": 133,
              "insert": 133,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]